#include <cstdio>
#include <map>
#include <iterator>
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <limits>
#include <math.h>
#include <cstdlib>
using namespace std;



string perevod(int t, bool flag){
	string s = "";	
	if (t < 0){
		t = t + 256;
	}
	int ost;
	while (t > 0){
		if (t % 2 == 0){
			s = "0" + s;
		} else {
			s = "1" + s;
		}
		t = t / 2;
	}
	if (flag){ 
	  for (int i = 8 - s.length(); i > 0; i--){
		  s = "0" + s;
	  }
	}
	return s;

}

void decode(const char* in,const char* out){
	ios_base::sync_with_stdio(false);
	const int buffer_size = 1024;
	char buffer[buffer_size];
	cin.tie(0);
	int n;
	int last;		
	FILE* P = freopen(in,"rb",stdin);
	FILE* P1 = freopen(out,"w",stdout);
	string s;
	int read_count;
	string unkod = "";
	string ans = "";
	long long tek;	
	cin >> n >> tek >>last;	
	map<string, char> kod;
	int symbol;
	for (int i = 0; i < n; i++){		
		cin >> symbol >> s;		
		kod[s] = char(symbol);
	}
	char a;	
	fread(&a,sizeof(char),1,P);
	unsigned int s1 = 1;
	unsigned int next = 0;
	int kol = 0;
	long long sum = 0;
	while (read_count = fread(buffer,1 ,buffer_size, P)){
		sum += read_count;
		for (int l = 0; l < read_count; l++){			
	    	if ((sum != tek + 1) || ((sum == tek + 1) && (l < read_count - 1))){
				s = perevod(buffer[l],true);		
			} else {
				if ((sum == tek + 1) && (l == read_count - 1)){
					s = perevod(buffer[l],false);
				}
			}
			unkod += s;			    
		    
		    for (int i = 0; i < unkod.length(); i++){
			   ans += unkod[i];
			   if (kod[ans] == 0){
				  kod.erase(ans);
			   } else { 				 
				   fprintf(P1,"%c",kod[ans]);
				   ans.clear();				
			    }
		    }
		    unkod.clear();
		}	
	}
}


void code(FILE* P,const char* out){
	map <char,int> kol;
	FILE* P1 = freopen(out,"wb",stdout);
	ios_base::sync_with_stdio(false);
	ofstream OUT(out);
	const int buffer_size = 1024;
	int read_count;
	char buffer[buffer_size];
	unsigned int buffer_write[buffer_size];
	vector<int> mas;	
	while (read_count = fread(buffer, 1, buffer_size, P)){
		for (int i = 0; i < read_count; i++){
			kol[buffer[i]]++;		
		}	  
	}
	
	int min1;
	int min2;
	int num1 = 0;
	int num2 = 0;
	int sum = 0;
	vector <char> symbol;
	for (map<char,int>::iterator t = kol.begin(); t != kol.end(); t++){
		symbol.push_back(t->first);
		mas.push_back(t->second);
		sum +=t->second;
	}
	vector<int> vkl(mas.size(),0);
	vector <vector <char> > number(mas.size());
	map<char, string> answer;
	for (int i = 0; i <mas.size(); i++){
		number[i].push_back(symbol[i]);
	}
	for (int i = 0; i < mas.size() - 1; i++){
		min1 = sum;
		min2 = sum;
		num1 = 0;
		num2 = 0;
		for (int j = 0; j < mas.size(); j++){
             if (vkl[j] == 0 && mas[j] <= min1){
				 min2 = min1;
				 min1 = mas[j];
				 num2 = num1;
				 num1 = j;
			 } else {
				 if (vkl[j] == 0 && mas[j] < min2){
					 min2 = mas[j];
					 num2 = j;
				 }
			 }
		}
			 vkl[num1] = 1;
			 mas[num2] += mas[num1];
			 for (int h = 0; h < number[num1].size(); h++){
				 answer[number[num1][h]] =  "1" + answer[number[num1][h]];
			 }
			 for (int h = 0; h < number[num2].size(); h++){
				 answer[number[num2][h]] =  "0" + answer[number[num2][h]];
			 }
			 for (int h = 0; h < number[num1].size(); h++){
				 number[num2].push_back(number[num1][h]);
			 }
		
	}
	sum = 0;	
	for (map<char,string>::iterator t = answer.begin(); t != answer.end(); t++){		
		sum += (t->second.length() * kol[t->first]) ;
	}
	//OUT << mas.size() <<' '<< sum % 32 << endl;	
	cout << mas.size() << ' '<< sum / 8 << ' ' << sum % 8 << endl;
	
	for (map<char,string>::iterator t = answer.begin(); t != answer.end(); t++){		
		cout << int(t->first) << ' ' << t->second << endl;
		
	}
	unsigned int count = 0;
	sum = -1;
	string tek = "";	
	fseek(P,0,SEEK_SET);

	unsigned int t;
	while (read_count = fread(buffer, 1, buffer_size, P)){
		for (int i = 0; i < read_count; i++){
			tek += answer[buffer[i]]; 		
		}				
		while (tek.length() > 7){
			count = 0;
			t = 1;
			int e = 7;		    
			for (int i = e; i >= 0; i--){
				count += (int(tek[i]) -int('0')) * t;
				t = t * 2;
			}			
			//cout  << count << ' ';
			char r = char(count);
			fprintf(P1,"%c",r);			
			tek.erase(0,e + 1);
		}
	}
	count = 0;
	t = 1;
	for (int i = tek.length() - 1; i >= 0; i--){
	   count += (int(tek[i]) - int('0')) * t;
	   t = t * 2;
	}
	char r = char(count);
	if (tek.length() != 0){
		fprintf(P1,"%c",r);
	}
	
}

int main(){
	string comand;
	string infile;
	string outfile;
	string p1;
	string p2;	
	
	cin >>  comand >> infile >>  outfile;	
	const char* in = infile.c_str();
	const char* out = outfile.c_str();	
	if ( comand == "in"){
		FILE* IN = fopen(in,"rb");
		code(IN,out);
	} else{
		decode(in,out);
	}
	
    return 0;
}
